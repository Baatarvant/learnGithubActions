# The name of your workflow
name: CI/CD with Github actions

# Controls when the workflow will run
'on':
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "preview"
  preview:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1 - Checks-out your repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      # Step 2 - Get yarn cache directory path
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ~/.cache/Cypress
            **/node_modules
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Step 3 - Nextjs project build
      - name: Nextjs project build
        run: |
          yarn build
          yarn export

      # Step 4 - Cypress run
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          # We have already installed all dependencies above
          install: false
          start: yarn start
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          record: false
          parallel: false
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.$CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.$GITHUB_TOKEN }}
          CYPRESS_PROJECT_ID: *****

      # Step 5 - Firebase preview deploy 
      - name: Firebase preview deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        id: preview
        with:
          repoToken: '${{ secrets.$GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.$FIREBASE_ACCOUNT }}'
          expires: 5d
          projectId: *****
          target: *****

      # Step 6 - Lighthouse audit on preview page
      - name: Lighthouse audit on preview page
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v8
        with:
          urls: |
            ${{steps.preview.outputs.details_url}}
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.$GITHUB_TOKEN }}

      # Step 7 - Format lighthouse score
      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.$GITHUB_TOKEN}}
          script: |
            const result = ${{ steps.lighthouse_audit.outputs.manifest }}[0].summary
            const links = ${{ steps.lighthouse_audit.outputs.links }}
            const formatResult = (res) => Math.round((res * 100))
            Object.keys(result).forEach(key => result[key] = formatResult(result[key]))
            const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥'
            const comment = [
                `‚ö°Ô∏è [Lighthouse report](${Object.values(links)[0]}) for the changes in this PR:`,
                '| Category | Score |',
                '| --- | --- |',
                `| ${score(result.performance)} Performance | ${result.performance} |`,
                `| ${score(result.accessibility)} Accessibility | ${result.accessibility} |`,
                `| ${score(result['best-practices'])} Best practices | ${result['best-practices']} |`,
                `| ${score(result.seo)} SEO | ${result.seo} |`,
                `| ${score(result.pwa)} PWA | ${result.pwa} |`,
                ' ',
                `*Lighthouse ran on [${Object.keys(links)[0]}](${Object.keys(links)[0]})*`
            ].join('\n')
             core.setOutput("comment", comment);

      # Step 8 - Add the lighthouse report to pull request
      - name: Add the lighthouse report to pull request
        id: comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v1
        with:
          GITHUB_TOKEN: ${{ secrets.$GITHUB_TOKEN }}
          number: ${{ github.event.issue.number }}
          header: lighthouse
          message: |
            ${{ steps.format_lighthouse_score.outputs.comment }}

      # Step 9 - Jest coverage report
      - name: Jest coverage report
        uses: ArtiomTr/jest-coverage-report-action@v2.0-rc.6
        with:
          github-token: ${{ secrets.$GITHUB_TOKEN }}
          package-manager: yarn
          test-script: yarn coverage  
